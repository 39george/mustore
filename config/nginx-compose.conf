# All nginx variables available at https://nginx.org/en/docs/varindex.html
user nginx;

# Should be auto or same as cpu cores count
worker_processes auto;

# Necessary line
events {
    # How much tcp connections we can create with one worker.
    worker_connections 1024;
    # Can nginx accept multiple connections at the one moment of time?
    multi_accept on;
}

# Array type directive
# Sets the path, format, and configuration for a buffered log write.
#access_log logs/access.log;
#access_log logs/access_notice.log notice;

http {
    log_format access '$remote_addr [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$gzip_ratio"'
                           ' Proxy: "$proxy_host" "$upstream_addr"';
    access_log /var/log/nginx/access.log access;

    # Enable correct `Content-Type` headers
    include mime.types;

    # This directive sets the character encoding for responses sent from the
    # server to UTF-8.
    charset utf-8;
    # This directive enables the use of the operating system's sendfile system
    # call to efficiently transfer files from disk to the network. It improves
    # performance by allowing the web server to directly transmit files
    # without copying them into its own memory first.
    sendfile on;
    # This directive enables the TCP_NOPUSH socket option, which tells nginx
    # to attempt to send response headers and the first part of the response
    # body in a single network packet, rather than sending them separately.
    # This can improve performance by reducing the number of packets sent
    # over the network.
    tcp_nopush on;
    # This directive disables the TCP_NODELAY socket option, which disables
    # the Nagle algorithm for TCP connections. When Nagle's algorithm is
    # enabled (default), small packets are delayed and combined with
    # subsequent packets to improve network efficiency. By disabling it, the
    # web server can send small packets immediately without delay, which can
    # be useful for real-time applications.
    tcp_nodelay off;
    # This directive sets the maximum size of the hash table used for storing
    # MIME types and associated file extensions. A larger hash table size
    # allows for more efficient lookup and matching of MIME types. The value
    # "2048" specifies the maximum number of entries in the hash table.
    types_hash_max_size 2048;

    # This directive enables the open file cache and sets the maximum number of
    # descriptors (files) that can be cached in memory. In this example, the
    # maximum number of descriptors is set to 1000. The `inactive` parameter
    # specifies how long a file descriptor can remain unused before it is
    # closed and removed from the cache. In this case, a file descriptor will
    # be closed if it is inactive for 20 seconds.
    open_file_cache max=1000 inactive=20s;
    # This directive sets the validity period for cached file descriptors. If
    # a file descriptor is not used within this period, it will be considered
    # stale and a new file descriptor will be opened for subsequent requests.
    # In this example, the validity period is set to 30 seconds.
    open_file_cache_valid 30s;
    #  This directive specifies the minimum number of requests that need to be
    # made for a file descriptor to be cached. If a file is frequently
    # accessed, caching its descriptor can improve performance. In this case,
    # a file descriptor will only be cached if it has been requested at least twice.
    open_file_cache_min_uses 2;
    # This directive enables caching of file descriptors for files that have
    # returned errors in previous requests. By caching the error status, nginx
    # avoids repeatedly attempting to access files that are known to be
    # unavailable or inaccessible. This can help improve performance and reduce
    # unnecessary file operations.
    open_file_cache_errors on;

    # This directive sets the buffer size for storing the client request body.
    # When a client sends a request with a body (e.g., in a POST request),
    # nginx will allocate a buffer to temporarily store the request body before
    # processing it. In this example, the buffer size is set to 16 kilobytes (16k).
    client_body_buffer_size 16k;
    # This directive sets the buffer size for storing the client request
    # headers. Request headers contain information such as the HTTP method,
    # URL, and other metadata. The buffer size specified here is 1 kilobyte (1k).
    client_header_buffer_size 1k;
    # This directive sets the maximum allowed size for a client request body.
    # If a client sends a request with a body larger than this limit, nginx
    # will return a 413 (Request Entity Too Large) error. In this example,
    # the maximum allowed size for a request body is set to 8 megabytes (8m).
    client_max_body_size 8m;
    # This directive sets the size and number of buffers used for storing
    # large client request headers. If a client sends request headers that are
    # larger than the configured buffer size, nginx will use these extra
    # buffers to store the headers. In this example, there are two buffers,
    # each with a size of 1 kilobyte (1k).
    large_client_header_buffers 2 1k;

    # This directive sets the maximum time in seconds that nginx will wait for
    # the client to send the request body (e.g., in a POST request). If the
    # client does not send the request body within this timeout period, nginx
    # will close the connection.
    client_body_timeout 12;
    # This directive sets the maximum time in seconds that nginx will wait for
    # the complete request headers from the client. If the client does not
    # send the complete headers within this timeout period, nginx will close
    # the connection.
    client_header_timeout 12;

    # This directive sets the maximum time in seconds that nginx will keep a
    # client connection open for subsequent requests. After a response is sent
    # to the client, if the client does not send a new request within this
    # timeout period, nginx will close the connection. The `keepalive_timeout`
    # value can be adjusted based on your specific requirements and the
    # expected behavior of client connections.
    # Use a higher keepalive timeout to reduce the need for repeated handshakes
    keepalive_timeout 300;

    # This directive sets the maximum time in seconds that nginx will wait
    # for the response to be sent to the client. If the response cannot be
    # fully sent within this timeout period, nginx will close the connection.
    send_timeout 10;


    # This directive enables gzip compression in nginx. When enabled, nginx
    # will compress the response body before sending it to the client
    # if the client supports gzip compression.
    gzip on;
    # This directive sets the minimum length in bytes for a response to be
    # considered for gzip compression. Responses with a length less than this
    # value will not be compressed. In this example, responses with a
    # length less than 100 bytes will not be compressed.
    gzip_min_length 100;
    # This directive sets the compression level for gzip compression.
    # The higher the compression level, the more CPU resources will be used
    # for compression. In this example, the compression level is set to 3,
    # which is a moderate compression level.
    gzip_comp_level 3;
    # `gzip_types` directive specifies the MIME types of responses that should
    # be compressed.
    gzip_types text/plain;
    gzip_types text/css;
    gzip_types text/javascript;

    # This directive disables gzip compression for clients that identify
    # themselves as "msie6" (Internet Explorer 6). This is useful because
    # older versions of Internet Explorer had issues with handling
    # gzip-compressed responses. By disabling gzip for these clients,
    # you ensure compatibility with those browsers.
    gzip_disable "msie6";

    server {
        listen       10000;
        server_name  localhost 127.0.0.1;

        location / {
            proxy_pass http://host.docker.internal:5173; # Vite dev server
        }

        location /api {
            proxy_pass http://mustore:8000; # Backend dev server
        }
    }
}


